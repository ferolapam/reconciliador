  - name: Run tests
    run: pytest -q
    
  # Passo Datadog (Transferido do arquivo anterior e corrigido)
  - name: Notify Datadog (US5)
    if: always() 
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ${{ secrets.DD_SITE }}
      GITHUB_STATUS: ${{ job.status }}
      REPO: ${{ github.repository }}
      RUN_ID: ${{ github.run_id }}
    run: |
      # 1. Instala o 'jq' (necessário para montar o JSON payload)
      sudo apt-get update && sudo apt-get install -y jq

      # 2. normaliza o SITE (remove prefixos e sufixos)
      SITE="${DD_SITE#https://}"
      SITE="${SITE%/}"

      # 3. monta payload
      STATUS="${GITHUB_STATUS:-success}"
      ALERT="success"
      if [ "$STATUS" != "success" ]; then ALERT="error"; fi

      TITLE="CI • ${REPO} • build-test"
      TEXT="GitHub Actions run #${RUN_ID} finalizado com status: ${STATUS}"

      PAYLOAD=$(jq -n --arg title "$TITLE" --arg text "$TEXT" --arg alert "$ALERT" --arg repo "$REPO" \
        '{title:$title, text:$text, alert_type:$alert, tags:["source:github","env:ci",("repo:"+$repo)]}')

      echo "Datadog host resolvido: api.${SITE}"

      # 4. envia evento (cabeçalho DD-API-KEY, sem query string)
      curl -sS -X POST "https://api.${SITE}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${DD_API_KEY}" \
        --data "$PAYLOAD" \
        -o /tmp/dd_resp.json -w "HTTP_STATUS:%{http_code}\n"

      echo "Resposta Datadog:"
      cat /tmp/dd_resp.json || true

